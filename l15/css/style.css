@import url("https://fonts.googleapis.com/css2?family=Roboto&display=swap");

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: "Roboto", sans-serif;
  min-height: 100vh;

  display: grid;
  grid-template-columns:repeat(9, 1fr);
  grid-auto-rows: 50px auto 50px;

  /* Allows us to define areas of the grid on our page. hd->header, mn->main, sb->sidebar, ft->footer. We are writing some of them 9 times because there are 9 columns, so if we want to cover the full page we have to span all 9 columns */
  grid-template-areas:
   "hd hd hd hd hd hd hd hd hd"
   "mn mn mn mn mn mn mn sb sb"
   "ft ft ft ft ft ft ft ft ft";
   column-gap: 0.5rem;
}

.el {
  background-color: rebeccapurple;
  color: white;
  display: grid;
  place-content: center;
}

.header {
  grid-area:hd;
}

.sidebar {
  grid-area: sb;
  background-color: blue;
}

.footer {
  grid-area:ft;
}

.box {
  background-color: #000;
  color: #fff;
  font-size: 2rem;
  padding: 0.5rem;
}

.container {
  grid-area: mn;
  min-height: 400px;
  /* Makes the content -> grid items */
  display : grid;

  /* Aligns grid items side by side as columns and defines the width of the columns of the grid, fr here is a special unit that comes only with CSS grids, and it means fraction. The repeat is used to avoid redundancy. 
  repeat(number of times you want to repeat the pattern of columns, width of the columns to be put in a pattern) */
  grid-template-columns: repeat(2, 1fr 2fr);
  /* Similarly, grid-template-rows defines the pattern or absolute values for grid items to be aligned one on top of another. */

  /* allows us to set the height of each row. We can use absolute values like px or a minmax function, minmax(min-height, max-height) */
  grid-auto-rows:minmax(150px,auto);
  /* Similary, grid-auto-columns allows us to set the width of each column */

  /* gap: row-gap col-gap or one value that applies to both */
  gap: 1rem;
}

.box:first-child {
  background-color: blue;
  /* Ends before the 4th col starts, basically covers 4-1 which is 3 columns, same logic for row */
  grid-column: 1 / 4;
  grid-row: 1 / 3;

  display: grid;
  /* Shorthand for align-content and justify-content. First value for align-content and second value for justify-content */
  place-content: center;
}

.box:nth-child(2) {
  background-color: purple;
  grid-column: 1 / 5;
  grid-row: 3 / 4;
}
