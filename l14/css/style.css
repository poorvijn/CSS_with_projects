@import url("https://fonts.googleapis.com/css2?family=Roboto&display=swap");

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: "Roboto", sans-serif;
  min-height: 100vh;
  padding: 20px;
}

/* The contents of this container which has display: flex are called flex items */
.container {
  max-width: 800px;
  min-height: 400px;
  margin-inline: auto;
  border: 1px solid black;
  display: flex;
  /* gap between items */
  gap:1rem;
  /* Horizontal alignment of flex items */
  justify-content: center;
  /* Vertical alignment of individual flex items */
  align-items:center;
  /* To change flex direction so that items are stacked on top of one another. This causes align-items to apply horizontally and justify-content to apply vertically, thus reversing their roles as when the flex-direction is set to horizontal */
  flex-flow: row wrap;
  /* Alignment of rows of flex items, each row considered together as one */
  align-content: space-evenly;
} 

/* Individual flex items */
.box {
    /* min-width: 100px; */
    min-height: 100px;
    background-color:black;
    color:white;
    font-size:2rem;
    padding:0.5rem;
    /* Aligns the content of each box, that is the numbers */
    display:flex;
    /* Horizontal centering, because flex-direction by default is row */
    justify-content: center;
    /* Vertical centering */
    align-items:center;

    /* The value here determines how each box would grow to fill up the space of its container, for example, a value of 1 would suggest that all boxes would grow at the same rate to fill up the container, THIS IS APPLIED AFTER flex-basis property*/
    /* flex-grow:1; */
    
    /* Opposite of flex-grow */
    /* flex-shrink:1; */

    /* Similar to min-width for flex items */
    /* flex-basis:250px; */

    /* Shorthand-> flex: grow shrink basis */
    flex: 1 1 150px;
}

/* Overrides the flex-shrink:1 */
.box:nth-child(2) {
    flex: 2 2 150px;
    /* order -> by default has a value of 0, which means that the element stays where it is supposed to be rendered on the page. A value higher than 0 would shift the element towards the end, a value less than zero would shift it towards the beginning */
    order:1;
}