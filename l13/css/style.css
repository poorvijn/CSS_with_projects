@import url("https://fonts.googleapis.com/css2?family=Roboto&family=Lobster&display=swap");

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: "Roboto", sans-serif;
  font-size: 1.5rem;
  min-height: 200vh;
}

.outer-container {
  border: 3px dashed #000;
  width: 75vw;
  height: 85vh;
  margin: 40px auto;
  position: relative;
}

.inner-container {
  border: 2px solid #00f;
  width: 40vw;
  height: 50vh;
  margin: 200px auto;
  /* position: relative; */
}

.box {
  width: 150px;
  height: 150px;
  color: #fff;
  padding: 1rem;
}

/* default position: static */

/* position:absolute, sets position according to its most recent ancestor element, which has position: relative.
If this div has no ancestor element with position: relative, it will place itself by considering the browser
window as its parent.
position: absolute can also be used to something off the page without affecting accessibility and without 
completely removing the element from the page, which is done by display: none and opacity: 0 */
 .absolute {
  background-color: #00f;
  position: absolute;
  top:0;
  left:0;
  /* without this z-index, since the fixed block is physically written after the absolute block in our HTML
  code, it would appear over the absolute block. But if we set z-index: 1, then our absolute block will
  overlap over the fixed block, even though it is written before the fixed block in the HTML code */
  z-index: 1;
}

/* position: relative, this element will always be placed relative to its immediate parent, irrespective of
whether the parent is set to relative or not */
.relative {
  background-color: #f00;
  position: relative;
  top: 300px;
  left: 100px;
}

/* Unless you change the initial position of the div, it is going to stay where it is. But here we have set
the top to 100px. So the div aligns itself 100px below the top of the browser and stays fixed to its position 
even on scrolling. This is irrespective of whether any parent has relative positioning or not. Fixed elements
always align themselves taking the browser window as their parent */
.fixed {
  background-color: green;
  position: fixed;
  top: 100px;
}

/* Sticks to its position that we set(or default position) until its parent container is still present on the
page. When we scroll down and the parent container goes out of the page the sticky block goes with it, unlike
the fixed block that stays in its position irrespective of scrolling */
.sticky {
  background-color: #000;
  position: sticky;
  top: 0;
} 

/*  Remember, how to make things disappear! 
Set position of element you want to disappear to absolute, and shift it to left or right by a negative value,
for example left: -1000px. It would still be rendered by the browser and read by a screen reader, but it won't be
visible on the page. This is better than display: none, which completely removes the element from the browser*/

/*//////////////////////////*/

html { scroll-behavior: smooth; }

section {
  height: 100vh;
}

.blue { background-color: #00f;}
.red { background-color: #f00;}
.green { background-color: green;}

header, footer {
  color: #fff;
  text-align: center;
  height: 100px;
}

header {
  position: sticky;
  top: 0;
  font-size: 5rem;
}

/* Parent of the footer is the body and the body is always a part of the browser window, hence it always sticks
to the bottom, because even if we scroll, its parent, the body, is always present on the browser */
footer {
  background-color: #000;
  position: sticky;
  bottom: 0;
  font-size: 3rem;
}

a:visited {
  color: #fff;
}

.social {
  background-color: royalblue;
  color: #fff;
  font-size: inherit;
  padding: 1rem;
  position: fixed;
  top: 30%;
  left: 0;
  z-index: 1;
} 